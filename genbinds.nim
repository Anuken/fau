import strutils, strformat, sequtils, sugar

const strings = """
glActiveTexture*: proc (texture: GLenum)
glAttachShader*: proc (program: GLuint, shader: GLuint)
glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring)
glBindBuffer*: proc (target: GLenum, buffer: GLuint)
glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint)
glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint)
glBindTexture*: proc (target: GLenum, texture: GLuint)
glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)
glBlendEquation*: proc (mode: GLenum)
glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum)
glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum)
glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum)
glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum)
glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer)
glCheckFramebufferStatus*: proc (target: GLenum): GLenum
glClear*: proc (mask: GLbitfield)
glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)
glClearDepthf*: proc (d: GLfloat)
glClearStencil*: proc (s: GLint)
glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean)
glCompileShader*: proc (shader: GLuint)
glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer)
glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer)
glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)
glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)
glCreateProgram*: proc (): GLuint
glCreateShader*: proc (`type`: GLenum): GLuint
glCullFace*: proc (mode: GLenum)
glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint)
glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint)
glDeleteProgram*: proc (program: GLuint)
glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint)
glDeleteShader*: proc (shader: GLuint)
glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint)
glDepthFunc*: proc (`func`: GLenum)
glDepthMask*: proc (flag: GLboolean)
glDepthRangef*: proc (n: GLfloat, f: GLfloat)
glDetachShader*: proc (program: GLuint, shader: GLuint)
glDisable*: proc (cap: GLenum)
glDisableVertexAttribArray*: proc (index: GLuint)
glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei)
glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer)
glEnable*: proc (cap: GLenum)
glEnableVertexAttribArray*: proc (index: GLuint)
glFinish*: proc ()
glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint)
glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint)
glFrontFace*: proc (mode: GLenum)
glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint)
glGenerateMipmap*: proc (target: GLenum)
glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint)
glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint)
glGenTextures*: proc (n: GLsizei, textures: ptr GLuint)
glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring)
glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring)
glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint)
glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint
glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean)
glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint)
glGetError*: proc (): GLenum
glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat)
glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint)
glGetIntegerv*: proc (pname: GLenum, data: ptr GLint)
glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint)
glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring)
glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint)
glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint)
glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring)
glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint)
glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring)
glGetString*: proc (name: GLenum): ptr GLubyte
glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat)
glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint)
glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat)
glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint)
glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint
glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat)
glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint)
glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer)
glHint*: proc (target: GLenum, mode: GLenum)
glIsBuffer*: proc (buffer: GLuint): GLboolean
glIsEnabled*: proc (cap: GLenum): GLboolean
glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean
glIsProgram*: proc (program: GLuint): GLboolean
glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean
glIsShader*: proc (shader: GLuint): GLboolean
glIsTexture*: proc (texture: GLuint): GLboolean
glLineWidth*: proc (width: GLfloat)
glLinkProgram*: proc (program: GLuint)
glPixelStorei*: proc (pname: GLenum, param: GLint)
glPolygonOffset*: proc (factor: GLfloat, units: GLfloat)
glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer)
glReleaseShaderCompiler*: proc ()
glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei)
glSampleCoverage*: proc (value: GLfloat, invert: GLboolean)
glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei)
glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei)
glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint)
glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint)
glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint)
glStencilMask*: proc (mask: GLuint)
glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint)
glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum)
glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum)
glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer)
glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat)
glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat)
glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint)
glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint)
glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer)
glUniform1f*: proc (location: GLint, v0: GLfloat)
glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat)
glUniform1i*: proc (location: GLint, v0: GLint)
glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint)
glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat)
glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat)
glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint)
glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint)
glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat)
glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat)
glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint)
glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint)
glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat)
glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat)
glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint)
glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint)
glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat)
glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat)
glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat)
glUseProgram*: proc (program: GLuint)
glValidateProgram*: proc (program: GLuint)
glVertexAttrib1f*: proc (index: GLuint, x: GLfloat)
glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat)
glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat)
glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat)
glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)
glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat)
glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)
glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat)
glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer)
glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei)"""

for line in strings.splitLines:
    #.replace("ptr ", "var ")
    let procName = line.split(" ")[0][0..^3]
    let procArgs = line[(line.find("proc ") + 5)..^1]
    let procArgsNorm = if procArgs.len <= 2: "" else: procArgs[1..^2].split(", ").mapIt(it[0..(it.find(": ") - 1)]).join(", ")
    let inline = "{.inline.}"
    let endParen = if procArgsNorm.endsWith(")"): "" else: ")"
    echo &"proc {procName}*{procArgs} {inline} = wrap.{procName}({procArgsNorm}{endParen}"