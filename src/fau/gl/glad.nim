#GLAD-generated loader with some modifications and signature changes.

#[
    OpenGL, OpenGL ES loader generated by glad 0.1.33 on Wed May 13 02:24:36 2020.

    Language/Generator: Nim
    Specification: gl
    APIs: gl=2.0, gles2=2.0
    Profile: core
    Extensions:
        GL_EXT_framebuffer_object
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="core" --api="gl=2.0,gles2=2.0" --generator="nim" --spec="gl" --extensions="GL_EXT_framebuffer_object"
    Online:
        https://glad.dav1d.de/#profile=core&language=nim&specification=gl&loader=on&api=gl%3D2.0&api=gles2%3D2.0&extensions=GL_EXT_framebuffer_object
]#

import strutils, gltypes

var glVersionMajor*, glVersionMinor*: int

# Functions
var
  GLAD_GL_VERSION_1_0*: bool
  GLAD_GL_VERSION_1_1*: bool
  GLAD_GL_VERSION_1_2*: bool
  GLAD_GL_VERSION_1_3*: bool
  GLAD_GL_VERSION_1_4*: bool
  GLAD_GL_VERSION_1_5*: bool
  GLAD_GL_VERSION_2_0*: bool
  GLAD_GL_ES_VERSION_2_0*: bool

  glActiveTexture*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.cdecl, gcsafe.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glBlendEquation*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.cdecl, gcsafe.}
  glClear*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glClearDepthf*: proc (d: GLfloat) {.cdecl, gcsafe.}
  glClearStencil*: proc (s: GLint) {.cdecl, gcsafe.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}
  glCompileShader*: proc (shader: GLuint) {.cdecl, gcsafe.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glCreateProgram*: proc (): GLuint {.cdecl, gcsafe.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}
  glCullFace*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}
  glDeleteProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}
  glDeleteShader*: proc (shader: GLuint) {.cdecl, gcsafe.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glDepthFunc*: proc (`func`: GLenum) {.cdecl, gcsafe.}
  glDepthMask*: proc (flag: GLboolean) {.cdecl, gcsafe.}
  glDepthRangef*: proc (n: GLfloat, f: GLfloat) {.cdecl, gcsafe.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}
  glDisable*: proc (cap: GLenum) {.cdecl, gcsafe.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.cdecl, gcsafe.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}
  glEnable*: proc (cap: GLenum) {.cdecl, gcsafe.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.cdecl, gcsafe.}
  glFinish*: proc () {.cdecl, gcsafe.}
  glFlush*: proc () {.cdecl, gcsafe.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}
  glFrontFace*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenerateMipmap*: proc (target: GLenum) {.cdecl, gcsafe.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glGetActiveAttribBASE: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glGetActiveUniformBASE: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetError*: proc (): GLenum {.cdecl, gcsafe.}
  glGetFloatvBASE: proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetIntegervBASE: proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramivBASE: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramInfoLogBASE: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetShaderivBASE: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetShaderInfoLogBASE: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.cdecl, gcsafe.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}
  glGetStringBASE: proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGetVertexAttribfvBASE: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetVertexAttribivBASE: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}
  glHint*: proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsProgram*: proc (program: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsShader*: proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}
  glLineWidth*: proc (width: GLfloat) {.cdecl, gcsafe.}
  glLinkProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glReleaseShaderCompiler*: proc () {.cdecl, gcsafe.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei) {.cdecl, gcsafe.}
  glShaderSourceBASE: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}
  glStencilMask*: proc (mask: GLuint) {.cdecl, gcsafe.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexParameterfvBASE: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexParameterivBASE: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}
  glUniform1fvBASE: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}
  glUniform1ivBASE: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}
  glUniform2fvBASE: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}
  glUniform2ivBASE: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}
  glUniform3fvBASE: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}
  glUniform3ivBASE: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}
  glUniform4fvBASE: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}
  glUniform4ivBASE: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniformMatrix2fvBASE: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3fvBASE: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4fvBASE: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUseProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glValidateProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1fvBASE: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2fvBASE: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3fvBASE: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4fvBASE: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}

  #ext / GL3
  glBindVertexArray*: proc (array: GLuint) {.cdecl, gcsafe.}
  glDeleteVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}
  glGenVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}
  glIsVertexArray*: proc (array: GLuint): GLboolean {.cdecl, gcsafe.}

  supportsVertexArrays*: bool

# Extensions
var 
  GLAD_GL_EXT_framebuffer_object*: bool
  GLAD_GL_ARB_vertex_array_object*: bool
  GLAD_GL_OES_vertex_array_object*: bool

type ExtensionProc*  = proc(extension: cstring): cint {.cdecl.} 

proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glCullFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glCullFace"))
  glFrontFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glFrontFace"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glHint"))
  glLineWidth = cast[proc (width: GLfloat) {.cdecl, gcsafe.}](load("glLineWidth"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glScissor"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexParameterf"))
  glTexParameterfvBASE = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexParameteri"))
  glTexParameterivBASE = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexParameteriv"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage2D"))
  glClear = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glClearColor"))
  glClearStencil = cast[proc (s: GLint) {.cdecl, gcsafe.}](load("glClearStencil"))
  glStencilMask = cast[proc (mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMask"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}](load("glColorMask"))
  glDepthMask = cast[proc (flag: GLboolean) {.cdecl, gcsafe.}](load("glDepthMask"))
  glDisable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glDisable"))
  glEnable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glEnable"))
  glFinish = cast[proc () {.cdecl, gcsafe.}](load("glFinish"))
  glFlush = cast[proc () {.cdecl, gcsafe.}](load("glFlush"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}](load("glBlendFunc"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFunc"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}](load("glStencilOp"))
  glDepthFunc = cast[proc (`func`: GLenum) {.cdecl, gcsafe.}](load("glDepthFunc"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPixelStorei"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glReadPixels"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}](load("glGetBooleanv"))
  glGetError = cast[proc (): GLenum {.cdecl, gcsafe.}](load("glGetError"))
  glGetFloatvBASE = cast[proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetFloatv"))
  glGetIntegervBASE = cast[proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegerv"))
  glGetStringBASE = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexParameteriv"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}](load("glIsEnabled"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glViewport"))


proc load_GL_VERSION_1_1(load: proc) =
  if not GLAD_GL_VERSION_1_1: return

  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}](load("glDrawElements"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}](load("glPolygonOffset"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}](load("glCopyTexImage2D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage2D"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage2D"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}](load("glBindTexture"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteTextures"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glGenTextures"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsTexture"))


proc load_GL_VERSION_1_3(load: proc) =
  if not GLAD_GL_VERSION_1_3: return

  glActiveTexture = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glActiveTexture"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}](load("glSampleCoverage"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage2D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage2D"))

proc load_GL_VERSION_1_4(load: proc) =
  if not GLAD_GL_VERSION_1_4: return

  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendFuncSeparate"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glBlendEquation"))


proc load_GL_VERSION_1_5(load: proc) =
  if not GLAD_GL_VERSION_1_5: return

  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBuffer"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteBuffers"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenBuffers"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsBuffer"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glBufferSubData"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetBufferParameteriv"))


proc load_GL_VERSION_2_0(load: proc) =
  if not GLAD_GL_VERSION_2_0: return

  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationSeparate"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}](load("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMaskSeparate"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}](load("glBindAttribLocation"))
  glCompileShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glCompileShader"))
  glCreateProgram = cast[proc (): GLuint {.cdecl, gcsafe.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}](load("glCreateShader"))
  glDeleteProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glDeleteProgram"))
  glDeleteShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glDeleteShader"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glDetachShader"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexAttribArray"))
  glGetActiveAttribBASE = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveAttrib"))
  glGetActiveUniformBASE = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetAttribLocation"))
  glGetProgramivBASE = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramiv"))
  glGetProgramInfoLogBASE = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetProgramInfoLog"))
  glGetShaderivBASE = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetShaderiv"))
  glGetShaderInfoLogBASE = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}](load("glGetShaderSource"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetUniformLocation"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetUniformiv"))
  glGetVertexAttribfvBASE = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetVertexAttribfv"))
  glGetVertexAttribivBASE = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}](load("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgram"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsShader"))
  glLinkProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glLinkProgram"))
  glShaderSourceBASE = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}](load("glShaderSource"))
  glUseProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glUseProgram"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}](load("glUniform1f"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}](load("glUniform2f"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glUniform3f"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}](load("glUniform4f"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}](load("glUniform1i"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}](load("glUniform2i"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}](load("glUniform3i"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}](load("glUniform4i"))
  glUniform1fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform1fv"))
  glUniform2fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform2fv"))
  glUniform3fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform3fv"))
  glUniform4fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform4fv"))
  glUniform1ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform1iv"))
  glUniform2ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform2iv"))
  glUniform3ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform3iv"))
  glUniform4ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform4iv"))
  glUniformMatrix2fvBASE = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fvBASE = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fvBASE = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4fv"))
  glValidateProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glValidateProgram"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1f"))
  glVertexAttrib1fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2f"))
  glVertexAttrib2fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3f"))
  glVertexAttrib3fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4f"))
  glVertexAttrib4fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribPointer"))

#load framebuffers as extension
proc load_GL_EXT_framebuffer_object(load: proc) =
  if not GLAD_GL_EXT_framebuffer_object: return
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsRenderbufferEXT"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glBindRenderbufferEXT"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteRenderbuffersEXT"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenRenderbuffersEXT"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glRenderbufferStorageEXT"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetRenderbufferParameterivEXT"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsFramebufferEXT"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.cdecl, gcsafe.}](load("glBindFramebufferEXT"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteFramebuffersEXT"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenFramebuffersEXT"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.cdecl, gcsafe.}](load("glCheckFramebufferStatusEXT"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture2DEXT"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glFramebufferRenderbufferEXT"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetFramebufferAttachmentParameterivEXT"))
  glGenerateMipmap = cast[proc (target: GLenum) {.cdecl, gcsafe.}](load("glGenerateMipmapEXT"))

#load framebuffers for core profile
proc load_GL_framebuffer_object(load: proc) =
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsFramebuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.cdecl, gcsafe.}](load("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.cdecl, gcsafe.}](load("glCheckFramebufferStatus"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture2D"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc (target: GLenum) {.cdecl, gcsafe.}](load("glGenerateMipmap"))

#load vertex array as extension (standard GL < 3.0)
proc load_GL_vertex_array_object(load: proc, checkExtension: bool) =

  #if glVersion < 3, check extension to make sure this is loadable; for >=3, it is part of the core profile
  if checkExtension and not GLAD_GL_ARB_vertex_array_object: return

  supportsVertexArrays = true

  glBindVertexArray = cast[proc (array: GLuint) {.cdecl, gcsafe.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsVertexArray"))

#er procs to satisfy the gl interface

#delete

proc glDeleteBuffer*(buffer: GLuint) = 
  var value = buffer
  glDeleteBuffers(1, addr value)

proc glDeleteFramebuffer*(framebuffer: GLuint) = 
  var value = framebuffer
  glDeleteFramebuffers(1, addr value)

proc glDeleteVertexArray*(varray: GLuint) = 
  var value = varray
  glDeleteVertexArrays(1, addr varray)

proc glDeleteRenderbuffer*(renderbuffer: GLuint) = 
  var value = renderbuffer
  glDeleteRenderbuffers(1, addr value)

proc glDeleteTexture*(texture: GLuint) = 
  var value = texture
  glDeleteTextures(1, addr value)

#gen

proc glGenBuffer*(): GLuint = 
  var resultVal: GLuint
  glGenBuffers(1, addr resultVal)
  return resultVal

proc glGenFramebuffer*(): GLuint = 
  var resultVal: GLuint
  glGenFramebuffers(1, addr resultVal)
  return resultVal

proc glGenVertexArray*(): GLuint = 
  var resultVal: GLuint
  glGenVertexArrays(1, addr resultVal)
  return resultVal

proc glGenRenderbuffer*(): GLuint = 
  var resultVal: GLuint
  glGenRenderbuffers(1, addr resultVal)
  return resultVal

proc glGenTexture*(): GLuint = 
  var resultVal: GLuint
  glGenTextures(1, addr resultVal)
  return resultVal

#getters, shaders

proc glShaderSource*(shader: GLuint, source: string) = 
  var srcArray = [source.cstring]
  glShaderSourceBASE(shader, 1, cast[cstringArray](addr srcArray), nil)

proc glGetFloatv*(pname: GLenum): GLfloat = 
  var resultVal: GLfloat
  glGetFloatvBASE(pname, addr resultVal)
  return resultVal

proc glGetIntegerv*(pname: GLenum): GLint = 
  var resultVal: GLint
  glGetIntegervBASE(pname, addr resultVal)
  return resultVal

proc glGetProgramiv*(program: GLuint, pname: GLenum): GLint = 
  var resultVal: GLint
  glGetProgramivBASE(program, pname, addr resultVal)
  return resultVal

proc glGetProgramInfoLog*(program: GLuint): string = 
  var infoLen: GLint
  glGetProgramivBASE(program, GL_INFO_LOG_LENGTH, addr infoLen)

  var infoLog : cstring = cast[cstring](alloc(infoLen + 1))
  glGetProgramInfoLogBASE(program, infoLen, nil, infoLog)
  result = $infoLog
  dealloc(infoLog)

proc glGetShaderiv*(shader: GLuint, pname: GLenum): GLint = 
  var resultVal: GLint
  glGetShaderivBASE(shader, pname, addr resultVal)
  return resultVal

proc glGetShaderInfoLog*(shader: GLuint): string = 
  var infoLen: GLint
  glGetShaderivBASE(shader, GL_INFO_LOG_LENGTH, addr infoLen)

  var infoLog : cstring = cast[cstring](alloc(infoLen + 1))
  glGetShaderInfoLogBASE(shader, infoLen, nil, infoLog)
  result = $infoLog
  dealloc(infoLog)

proc glGetString*(name: GLenum): string = 
  return $cast[cstring](glGetStringBASE(GL_EXTENSIONS))

proc glGetVertexAttribfv*(index: GLuint, pname: GLenum): GLfloat = 
  var resultVal: GLfloat
  glGetVertexAttribfvBASE(index, pname, addr resultVal)
  return resultVal

proc glGetVertexAttribiv*(index: GLuint, pname: GLenum): GLint = 
  var resultVal: GLint
  glGetVertexAttribivBASE(index, pname, addr resultVal)
  return resultVal

#attributes

proc glGetActiveAttrib*(program: GLuint, index: GLuint, length: var GLsizei, size: var GLint, `type`: var GLenum, name: var string) = 
  var alen: GLsizei
  var asize: GLint
  var atype: GLenum
  var aname: cstring = cast[cstring](alloc(256))
  glGetActiveAttribBASE(program, index, 256, addr alen, addr asize, addr atype, aname)
  length = alen
  size = asize
  `type` = atype
  name = $aname
  dealloc aname

proc glGetActiveUniform*(program: GLuint, index: GLuint, length: var GLsizei, size: var GLint, `type`: var GLenum, name: var string) = 
  var alen: GLsizei
  var asize: GLint
  var atype: GLenum
  var aname: cstring = cast[cstring](alloc(256))
  glGetActiveUniformBASE(program, index, 256, addr alen, addr asize, addr atype, aname)
  length = alen
  size = asize
  `type` = atype
  name = $aname
  dealloc aname

proc glVertexAttrib1fv*(index: GLuint, v: openArray[GLfloat]) = glVertexAttrib1fvBASE(index, cast[ptr GLfloat](unsafeAddr v))
proc glVertexAttrib2fv*(index: GLuint, v: openArray[GLfloat]) = glVertexAttrib2fvBASE(index, cast[ptr GLfloat](unsafeAddr v))
proc glVertexAttrib3fv*(index: GLuint, v: openArray[GLfloat]) = glVertexAttrib3fvBASE(index, cast[ptr GLfloat](unsafeAddr v))
proc glVertexAttrib4fv*(index: GLuint, v: openArray[GLfloat]) = glVertexAttrib4fvBASE(index, cast[ptr GLfloat](unsafeAddr v))

#uniforms

proc glUniform1fv*(location: GLint, count: GLsizei, value: openArray[GLfloat]) = glUniform1fvBASE(location, count, cast[ptr GLfloat](unsafeAddr value))
proc glUniform1iv*(location: GLint, count: GLsizei, value: openArray[GLint]) = glUniform1ivBASE(location, count, cast[ptr GLint](unsafeAddr value))
proc glUniform2fv*(location: GLint, count: GLsizei, value: openArray[GLfloat]) = glUniform2fvBASE(location, count, cast[ptr GLfloat](unsafeAddr value))
proc glUniform2iv*(location: GLint, count: GLsizei, value: openArray[GLint]) = glUniform2ivBASE(location, count, cast[ptr GLint](unsafeAddr value))
proc glUniform3fv*(location: GLint, count: GLsizei, value: openArray[GLfloat]) = glUniform3fvBASE(location, count, cast[ptr GLfloat](unsafeAddr value))
proc glUniform3iv*(location: GLint, count: GLsizei, value: openArray[GLint]) = glUniform3ivBASE(location, count, cast[ptr GLint](unsafeAddr value))
proc glUniform4fv*(location: GLint, count: GLsizei, value: openArray[GLfloat]) = glUniform4fvBASE(location, count, cast[ptr GLfloat](unsafeAddr value))
proc glUniform4iv*(location: GLint, count: GLsizei, value: openArray[GLint]) = glUniform4ivBASE(location, count, cast[ptr GLint](unsafeAddr value))
proc glUniformMatrix2fv*(location: GLint, count: GLsizei, transpose: GLboolean, value: openArray[GLfloat]) = glUniformMatrix2fvBASE(location, count, transpose, cast[ptr GLfloat](unsafeAddr value))
proc glUniformMatrix3fv*(location: GLint, count: GLsizei, transpose: GLboolean, value: openArray[GLfloat]) = glUniformMatrix3fvBASE(location, count, transpose, cast[ptr GLfloat](unsafeAddr value))
proc glUniformMatrix4fv*(location: GLint, count: GLsizei, transpose: GLboolean, value: openArray[GLfloat]) = glUniformMatrix4fvBASE(location, count, transpose, cast[ptr GLfloat](unsafeAddr value))

#textures

proc glTexParameterfv*(target: GLenum, pname: GLenum): GLfloat = 
  var varResult: GLfloat
  glTexParameterfvBASE(target, pname, addr varResult)
  return varResult

proc glTexParameteriv*(target: GLenum, pname: GLenum): GLint = 
  var varResult: GLint
  glTexParameterivBASE(target, pname, addr varResult)
  return varResult

#loaders

proc findCoreGL(glVersion: string) =
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(version[0]) - ord('0')
  var minor = ord(version[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1
  GLAD_GL_VERSION_1_1 = (major == 1 and minor >= 1) or major > 1
  GLAD_GL_VERSION_1_2 = (major == 1 and minor >= 2) or major > 1
  GLAD_GL_VERSION_1_3 = (major == 1 and minor >= 3) or major > 1
  GLAD_GL_VERSION_1_4 = (major == 1 and minor >= 4) or major > 1
  GLAD_GL_VERSION_1_5 = (major == 1 and minor >= 5) or major > 1
  GLAD_GL_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2


proc gladLoadGL(load: proc, extensionProc: ExtensionProc): bool =
  glGetStringBASE = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  if glGetStringBASE == nil: return false

  var glVersion = cast[cstring](glGetStringBASE(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)
  load_GL_VERSION_1_1(load)
  load_GL_VERSION_1_3(load)
  load_GL_VERSION_1_4(load)
  load_GL_VERSION_1_5(load)
  load_GL_VERSION_2_0(load)

  GLAD_GL_EXT_framebuffer_object = extensionProc("GL_EXT_framebuffer_object") != 0
  GLAD_GL_ARB_vertex_array_object = extensionProc("GL_ARB_vertex_array_object") != 0

  #load fbo extension if not using 3.0
  if glVersionMajor < 3:
    load_GL_EXT_framebuffer_object(load)
  else:
    load_GL_framebuffer_object(load)

  #load and check for extension if gl version < 3
  load_GL_vertex_array_object(load, glVersionMajor < 3)

  return glVersionMajor != 0 or glVersionMinor != 0

proc load_GL_ES_VERSION_2_0(load: proc) =
  if not GLAD_GL_ES_VERSION_2_0: return

  glActiveTexture = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glActiveTexture"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}](load("glBindAttribLocation"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.cdecl, gcsafe.}](load("glBindFramebuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glBindRenderbuffer"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}](load("glBindTexture"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glBlendEquation"))
  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationSeparate"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}](load("glBlendFunc"))
  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendFuncSeparate"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glBufferSubData"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.cdecl, gcsafe.}](load("glCheckFramebufferStatus"))
  glClear = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glClearColor"))
  glClearDepthf = cast[proc (d: GLfloat) {.cdecl, gcsafe.}](load("glClearDepthf"))
  glClearStencil = cast[proc (s: GLint) {.cdecl, gcsafe.}](load("glClearStencil"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}](load("glColorMask"))
  glCompileShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glCompileShader"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage2D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage2D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}](load("glCopyTexImage2D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage2D"))
  glCreateProgram = cast[proc (): GLuint {.cdecl, gcsafe.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}](load("glCreateShader"))
  glCullFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glCullFace"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteBuffers"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteFramebuffers"))
  glDeleteProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glDeleteProgram"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteRenderbuffers"))
  glDeleteShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glDeleteShader"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteTextures"))
  glDepthFunc = cast[proc (`func`: GLenum) {.cdecl, gcsafe.}](load("glDepthFunc"))
  glDepthMask = cast[proc (flag: GLboolean) {.cdecl, gcsafe.}](load("glDepthMask"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.cdecl, gcsafe.}](load("glDepthRangef"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glDetachShader"))
  glDisable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glDisable"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexAttribArray"))
  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}](load("glDrawElements"))
  glEnable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glEnable"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexAttribArray"))
  glFinish = cast[proc () {.cdecl, gcsafe.}](load("glFinish"))
  glFlush = cast[proc () {.cdecl, gcsafe.}](load("glFlush"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glFramebufferRenderbuffer"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture2D"))
  glFrontFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glFrontFace"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenBuffers"))
  glGenerateMipmap = cast[proc (target: GLenum) {.cdecl, gcsafe.}](load("glGenerateMipmap"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenFramebuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenRenderbuffers"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glGenTextures"))
  glGetActiveAttribBASE = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveAttrib"))
  glGetActiveUniformBASE = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetAttribLocation"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}](load("glGetBooleanv"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetBufferParameteriv"))
  glGetError = cast[proc (): GLenum {.cdecl, gcsafe.}](load("glGetError"))
  glGetFloatvBASE = cast[proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetFloatv"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetFramebufferAttachmentParameteriv"))
  glGetIntegervBASE = cast[proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegerv"))
  glGetProgramivBASE = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramiv"))
  glGetProgramInfoLogBASE = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetProgramInfoLog"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetRenderbufferParameteriv"))
  glGetShaderivBASE = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetShaderiv"))
  glGetShaderInfoLogBASE = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetShaderInfoLog"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.cdecl, gcsafe.}](load("glGetShaderPrecisionFormat"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}](load("glGetShaderSource"))
  glGetStringBASE = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexParameteriv"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetUniformiv"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetUniformLocation"))
  glGetVertexAttribfvBASE = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetVertexAttribfv"))
  glGetVertexAttribivBASE = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}](load("glGetVertexAttribPointerv"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glHint"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsBuffer"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}](load("glIsEnabled"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsFramebuffer"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgram"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsRenderbuffer"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsShader"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsTexture"))
  glLineWidth = cast[proc (width: GLfloat) {.cdecl, gcsafe.}](load("glLineWidth"))
  glLinkProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glLinkProgram"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPixelStorei"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}](load("glPolygonOffset"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glReadPixels"))
  glReleaseShaderCompiler = cast[proc () {.cdecl, gcsafe.}](load("glReleaseShaderCompiler"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glRenderbufferStorage"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}](load("glSampleCoverage"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glScissor"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei) {.cdecl, gcsafe.}](load("glShaderBinary"))
  glShaderSourceBASE = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}](load("glShaderSource"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFunc"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFuncSeparate"))
  glStencilMask = cast[proc (mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMask"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMaskSeparate"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}](load("glStencilOp"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}](load("glStencilOpSeparate"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage2D"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexParameterf"))
  glTexParameterfvBASE = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexParameteri"))
  glTexParameterivBASE = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexParameteriv"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage2D"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}](load("glUniform1f"))
  glUniform1fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform1fv"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}](load("glUniform1i"))
  glUniform1ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform1iv"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}](load("glUniform2f"))
  glUniform2fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform2fv"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}](load("glUniform2i"))
  glUniform2ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform2iv"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glUniform3f"))
  glUniform3fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform3fv"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}](load("glUniform3i"))
  glUniform3ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform3iv"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}](load("glUniform4f"))
  glUniform4fvBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform4fv"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}](load("glUniform4i"))
  glUniform4ivBASE = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform4iv"))
  glUniformMatrix2fvBASE = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fvBASE = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fvBASE = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4fv"))
  glUseProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glUseProgram"))
  glValidateProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glValidateProgram"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1f"))
  glVertexAttrib1fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2f"))
  glVertexAttrib2fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3f"))
  glVertexAttrib3fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4f"))
  glVertexAttrib4fvBASE = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribPointer"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glViewport"))

proc load_GL_OES_vertex_array_object(load: proc) =
  if not GLAD_GL_OES_vertex_array_object: return
  
  supportsVertexArrays = true
  
  glBindVertexArray = cast[proc (array: GLuint) {.cdecl, gcsafe.}](load("glBindVertexArrayOES"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteVertexArraysOES"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glGenVertexArraysOES"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsVertexArrayOES"))

proc findCoreGLES2(glVersion: string) =
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(version[0]) - ord('0')
  var minor = ord(version[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_ES_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2

proc gladLoadGLES2(load: proc, extensionProc: ExtensionProc): bool =
  glGetStringBASE = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  if glGetStringBASE == nil: return false

  var glVersion = cast[cstring](glGetStringBASE(GL_VERSION))
  if glVersion == nil: return false

  findCoreGLES2($glVersion)

  load_GL_ES_VERSION_2_0(load)

  GLAD_GL_OES_vertex_array_object = extensionProc("GL_OES_vertex_array_object") != 0

  if glVersionMajor < 3:
    #load extension for GLES < 3.0
    load_GL_OES_vertex_array_object(load);
  else:
    load_GL_vertex_array_object(load, false)

  return glVersionMajor != 0 or glVersionMinor != 0

#loads the correct platform-specific version of openGL (ES 2.0 on Android / iOS, standard GL 2.0+ on desktop)
proc loadGl*(load: proc, extensionProc: ExtensionProc): bool = 
  when defined(Android) or defined(iOS):
    return gladLoadGLES2(load, extensionProc)
  else:
    return gladLoadGL(load, extensionProc)